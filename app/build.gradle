plugins {
    id 'com.android.application'
}

android {
    namespace 'com.example.myapplication'
    compileSdk 33

    defaultConfig {
        applicationId "com.example.myapplication"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild{
            cmake{
                cppFlags "-std=c++11"
                arguments "-DANDROID_STL=gnustl_static"
                //配置cpp目录里面的文件需要编译的so库类型，这个不是说最终打包到apk的so库类型，配置
                //打包到apk里面的so库的类型，需要单独在ndk里面配置
                abiFilters 'arm64-v8a','armeabi-v7a'
            }
        }
        ndk {
            //配置打包到apk里面的so库的类型
            abiFilters 'armeabi-v7a'
        }
        //通过实验发现，在externalNativeBuild的cmake的abiFilters配置好了需要编译的
        //cpu架构类型以后，其实就不需要在外面配置ndk的abi了，上面那个配置已经就生效了，这个
        //ndk配置可以去掉了，暂时先放在这里吧
    }



    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    externalNativeBuild {
        cmake {
            path file('./CMakeLists.txt')
            version '3.10.2'
        }
    }



    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation 'com.blankj:utilcode:1.30.7'
}